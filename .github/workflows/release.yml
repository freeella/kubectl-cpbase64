on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

name: Create Release

jobs:
  release:
    permissions:
        contents: write
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Setup Bats and bats libs
        uses: bats-core/bats-action@2.0.0

      - name: Set version and create ZIP
        id: vars
        run: |
          export project_version=${{ github.ref }}
          export project_version=$( echo $project_version | sed 's|refs/tags/||g' )
          # allow manual run
          if [[ "${{ github.event_name }}"  == 'workflow_dispatch' ]]
          then
            export project_version=v0.0.1-test
          else
            # curent changes text
            # echo "Changes in this Release">./release_changes.md
            # commit text of last commit
            git show -s --format=%B >./release_changes.md
          fi
          echo "event=${{ github.event_name }}"
          echo "project_version=${project_version}"
          echo "project_version=${project_version}" >>$GITHUB_OUTPUT
          sed -i "s|^CPB64_VERSION=.*|CPB64_VERSION=$project_version|g" src/main/kubectl-cpbase64
          zip -j ./kubectl-cpbase64.release-${project_version}.zip src/main/kubectl-cpbase64 LICENSE README.md
          sha256sum ./kubectl-cpbase64.release-${project_version}.zip
          sha256sum ./kubectl-cpbase64.release-${project_version}.zip | awk '{print "sha256sum="$1}' >>$GITHUB_OUTPUT

      - name: Check version
        id: check
        run: |
          grep -Hn CPB64_VERSION src/main/kubectl-cpbase64

      - name: Run Unit Tests
        run: |
          set -x
          which bats
          which kubectl
          bats -r src/tests/

      - name: Create Test Release
        id: create_draft
        uses: actions/create-release@v1.1.4
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.vars.outputs.project_version }}
          release_name: Release ${{ steps.vars.outputs.project_version }}
          body: |
            Changes in this Release
            - This is a test release only

            Checksum: ${{ steps.vars.outputs.sha256sum }}
          draft: false
          prerelease: true

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        if: ${{ github.event_name != 'workflow_dispatch' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.vars.outputs.project_version }}
          release_name: Release ${{ steps.vars.outputs.project_version }}
          body_path: ./release_changes.md
          draft: false
          prerelease: false

      - name: Get Upload URL
        id: get_url
        run: |
          if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]
          then
            echo "upload_url=${{ steps.create_draft.outputs.upload_url }}" >>$GITHUB_OUTPUT
          else
            echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >>$GITHUB_OUTPUT
          fi

      - name: Upload Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_url.outputs.upload_url }}
          asset_path: ./kubectl-cpbase64.release-${{ steps.vars.outputs.project_version }}.zip
          asset_name: kubectl-cpbase64.release-${{ steps.vars.outputs.project_version }}.zip
          asset_content_type: application/zip

