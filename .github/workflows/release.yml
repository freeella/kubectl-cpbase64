on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

name: Create Release

jobs:
  release:
    permissions:
        contents: write
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bats and bats libs
        uses: bats-core/bats-action@2.0.0

      - name: Set Version
        id: vars
        run: |
          PROJECT_VERSION=${{ github.ref }}
          PROJECT_VERSION=$( echo $PROJECT_VERSION | sed 's|refs/tags/||g' )
          # allow manual run
          if [[ "${{ github.event_name }}"  == 'workflow_dispatch' ]]
          then
            PROJECT_VERSION=v0.0.1-test
          fi
          echo "event=${{ github.event_name }}"
          echo "PROJECT_VERSION=${PROJECT_VERSION}"
          echo "PROJECT_VERSION=${PROJECT_VERSION}" >>"$GITHUB_ENV"
          sed -i "s|^CPB64_VERSION=.*|CPB64_VERSION=$PROJECT_VERSION|g" src/main/kubectl-cpbase64

      - name: Run Unit Tests
        run: |
          set -x
          # kubectl seems always pre-installed; not needed for syntax checks if not installed
          command -v kubectl 2>/dev/null || alias kubectl=true
          which bats
          which kubectl
          bats -r src/tests/

      - name: Package Release
        env:
            PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
        run: |
          set -x
          zip -j ./kubectl-cpbase64.release-${PROJECT_VERSION}.zip src/main/kubectl-cpbase64 LICENSE README.md
          sha256sum ./kubectl-cpbase64.release-${PROJECT_VERSION}.zip
          SHA256SUM=$( sha256sum ./kubectl-cpbase64.release-${PROJECT_VERSION}.zip | awk '{print $1}' )
          echo SHA256SUM=${SHA256SUM}>>"$GITHUB_ENV"
          if [[ "${{ github.event_name }}"  != 'workflow_dispatch' ]]
          then
            # curent changes text
            # echo "Changes in this Release">./release_changes.md
            # commit text of last commit
            git show -s --format=%B >./release_changes.md
            printf '\nChecksum: %s (sha256sum)\n' "${SHA256SUM}" >>./release_changes.md
          fi
          printf '\nChecksum: %s (sha256sum)\n' "${SHA256SUM}"

      ##### TEST release #####
      - name: Create Test Release
        id: create_draft
        uses: actions/create-release@v1
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          GITHUB_TOKEN:    ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.PROJECT_VERSION }}
          release_name: Release ${{ env.PROJECT_VERSION }}
          body: |
            Changes in this Release
            - This is a test release only

            Checksum: ${{ env.SHA256SUM }} (sha256sum)
          draft: false
          prerelease: true

      ##### TEST release #####
      - name: Update SHA256 hash for Test Release
        id: update_test_hash
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          GITHUB_TOKEN:    ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        run: |
          set -x
          git config user.name "Release Bot"
          git config user.email "coding@blicke.de"
          sed -i "s|sha256: .*|sha256: ${{ env.SHA256SUM }}|g" plugins/cpbase64-test.yaml
          git status
          git diff plugins/cpbase64-test.yaml
          git add plugins/cpbase64-test.yaml
          git commit -m "Updated SHA256 key for version: ${{ env.PROJECT_VERSION }}"
          git push

      ##### FINAL release #####
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ github.event_name != 'workflow_dispatch' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
          SHA256SUM:       ${{ env.SHA256SUM }}
        with:
          tag_name: ${{ env.PROJECT_VERSION }}
          release_name: Release ${{ env.PROJECT_VERSION }}
          body_path: ./release_changes.md
          draft: false
          prerelease: false

      ##### FINAL release #####
      - uses: actions/checkout@v4
        if: ${{ github.event_name != 'workflow_dispatch' }}
        with:
          ref: main
          path: main_branch

      - name: Update SHA256 hash for Release
        id: update_release_hash
        if: ${{ github.event_name != 'workflow_dispatch' }}
        env:
          GITHUB_TOKEN:    ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        working-directory: main_branch
        run: |
          set -x
          git config user.name "Release Bot"
          git config user.email "coding@blicke.de"
          sed -i 's|version: .*|version: "${{ env.PROJECT_VERSION }}"|g' plugins/cpbase64.yaml
          sed -i 's|sha256: .*|sha256: ${{ env.SHA256SUM }}|g' plugins/cpbase64.yaml
          sed -i 's|uri: .*|uri: https://github.com/freeella/kubectl-cpbase64/releases/download/${{ env.PROJECT_VERSION }}/kubectl-cpbase64.release-${{ env.PROJECT_VERSION }}.zip|g' plugins/cpbase64.yaml
          git status
          git diff plugins/cpbase64.yaml
          git add plugins/cpbase64.yaml
          PROJECT_VERSION_YAML_FILE=$( echo '${{ env.PROJECT_VERSION }}' | sed 's/\./-/g' )
          cp plugins/cpbase64.yaml plugins/cpbase64-${PROJECT_VERSION_YAML_FILE}.yaml
          git diff plugins/cpbase64-${PROJECT_VERSION_YAML_FILE}.yaml
          git add plugins/cpbase64-${PROJECT_VERSION_YAML_FILE}.yaml
          git commit -m "Updated SHA256 key for version: ${{ env.PROJECT_VERSION }}"
          git push

      #### ALL releases ####
      - name: Get Upload URL
        id: get_url
        run: |
          if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]
          then
            echo "UPLOAD_URL=${{ steps.create_draft.outputs.upload_url }}" >>"$GITHUB_ENV"
          else
            echo "UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}" >>"$GITHUB_ENV"
          fi

      - name: Upload Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:    ${{ github.token }}
          UPLOAD_URL:      ${{ env.UPLOAD_URL }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./kubectl-cpbase64.release-${{ env.PROJECT_VERSION }}.zip
          asset_name: kubectl-cpbase64.release-${{ env.PROJECT_VERSION }}.zip
          asset_content_type: application/zip


