#!/usr/bin/env bash

### config
# - calculate defaults based on current directory
FULLNAME=$(realpath ${BASH_SOURCE[0]})
SHORTNAME=$(basename ${BASH_SOURCE[0]})
KUBECTL_CMD=$( echo $SHORTNAME | sed 's|kubectl-||g' )
#BASEDIR=$(dirname ${FULLNAME})
CPB64_VERSION=main
DEBUG= # empty to disable
#DEBUG=1 # any value to enable
TEST= # empty to disable
#TEST=1 # any value to enable

### functions
# - debugging
function cpb64_debug {
    [[ $DEBUG ]] && echo "DEBUG: $@"
    return 0
}

function cpb64_test {
    if [[ $TEST ]]
    then
        printf '%s' ";LOCAL_FILE=${LOCAL_FILE};KUBERNETES_NS=${KUBERNETES_NS};KUBERNETES_POD=${KUBERNETES_POD};KUBERNETES_FILE=${KUBERNETES_FILE};CONTAINER_NAME=${CONTAINER_NAME};COPY_FROM_LOCAL=$COPY_FROM_LOCAL;"
        exit 0
    else
        return 0
    fi
}

# - version
function cpb64_version {
    printf "Version: ${CPB64_VERSION} (${FULLNAME})\n"
}

# - documentation
function cpb64_about {
    cpb64_version

    printf '%s' "
Usage:	kubectl ${KUBECTL_CMD} [from_location] [to_location] [-c container_name]
	kubectl ${KUBECTL_CMD} [-l|--local] /tmp/foo.txt [-r|--remote] [NS/]some-pod:[.|/tmp/[bar.txt]] [-c container_name]
	kubectl ${KUBECTL_CMD} [-r|--remote] [namespace/]some-pod:/tmp/foo.txt  [-l|--local] [.|/tmp/[bar.txt]] [-c container_name]

	'kubectl ${KUBECTL_CMD}' tries to be an alternative to 'kubectl cp'
	when 'tar' is not available. Command 'base64' is used instead.

	Command line syntax of 'kubectl ${KUBECTL_CMD}' is similar to 'kubectl cp'!

Command line examples:

	kubectl ${KUBECTL_CMD} version - returns the version of this plugin
	kubectl ${KUBECTL_CMD} help - returns this help screen

	# Copy /tmp/foo from a remote pod to /tmp/bar locally
	kubectl ${KUBECTL_CMD} <some-pod>:/tmp/foo /tmp/bar
	kubectl ${KUBECTL_CMD} <some-namespace>/<some-pod>:/tmp/foo /tmp/bar
	kubectl ${KUBECTL_CMD} <some-namespace>/<some-pod>:/tmp/foo /tmp/bar -c <specific-container>
	kubectl ${KUBECTL_CMD} <some-pod>:/tmp/foo /tmp/bar -c <specific-container>

	# Copy local /tmp/foo to a remote pod file /tmp/bar
	kubectl ${KUBECTL_CMD} /tmp/foo <some-pod>:/tmp/bar
	kubectl ${KUBECTL_CMD} /tmp/foo <some-namespace>/<some-pod>:/tmp/bar
	kubectl ${KUBECTL_CMD} /tmp/foo <some-namespace>/<some-pod>:/tmp/bar -c <specific-container>
	kubectl ${KUBECTL_CMD} /tmp/foo <some-pod>:/tmp/bar -c <specific-container>

	# ${KUBECTL_CMD} specific:
	# Copy /tmp/foo from a remote pod to /tmp/foo locally
	kubectl ${KUBECTL_CMD} <some-pod>:/tmp/foo /tmp/
	kubectl ${KUBECTL_CMD} <some-pod>:/tmp/foo /tmp
	cd ~/tmp; kubectl ${KUBECTL_CMD} <some-pod>:/tmp/foo .

	# Copy local /tmp/foo to a remote pod file /tmp/foo
	kubectl ${KUBECTL_CMD} /tmp/foo <some-pod>:/tmp/
	# Copy local /tmp/foo to a remote pod file ~/foo
	kubectl ${KUBECTL_CMD} /tmp/foo <some-pod>:.

	# Copy local /tmp/foo_2024-04-01_20:33:44 to some remote pod file /tmp/bar_2024-04-01_20:33:44
	kubectl ${KUBECTL_CMD} -l /tmp/foo_2024-04-01_20:33:44 -r <some-pod>:/tmp/bar_2024-04-01_20:33:44
	kubectl ${KUBECTL_CMD} --local /tmp/foo_2024-04-01_20:33:44 --remote <some-pod>:/tmp/bar_2024-04-01_20:33:44

	# Copy from some remote pod file /tmp/foo_2024-04-01_20:33:44 to a local file /tmp/bar_2024-04-01_20:33:44
	kubectl ${KUBECTL_CMD} -r <some-pod>:/tmp/foo_2024-04-01_20:33:44 -l /tmp/bar_2024-04-01_20:33:44
	kubectl ${KUBECTL_CMD} --remote <some-pod>:/tmp/foo_2024-04-01_20:33:44 --local /tmp/bar_2024-04-01_20:33:44
"
}

# - checking for required external tools
function cpb64_dependency_check {
    local command

    for command in base64 tr sed kubectl cat realpath basename
    do
        if ! command -v ${command} >/dev/null
        then
            echo "ERROR: Client command '${command}' is required!" >&2
            exit 10
        fi
    done
}

# - parsing commad line arguments with as less as possible dependencies
function cpb64_parse_arguments {
    # temp only
    local is_from_found=0
    local is_to_found=0
    local required_var
    local remote_file_arguent
    # to be used outside of the function
    CONTAINER_NAME=''
    COPY_FROM_LOCAL=1
    KUBERNETES_NS=''
    KUBERNETES_POD=''
    KUBERNETES_FILE=''
    LOCAL_FILE=''

    # documentation options
    # - help
    if [ "$#" -eq 0 ] || [[ "$1" =~ ^(help|-h|--help)$ ]]
    then
        cpb64_about
        exit 0
    fi

    # - version
    if [ "$1" == "version" ]
    then
        cpb64_version
        exit 0
    fi

    # - copy syntax
    while [[ $# -gt 0 ]]; do

        if [ -z "$1" ]
        then
            cpb64_debug "[EMPTY] argument found!"
            shift # past argument
            continue
        fi

        case $1 in
            # - debug option
            -d)
                DEBUG=1
                shift # past argument
                continue
            ;;
            # - test option
            --test)
                TEST=1
                shift # past argument
                continue
            ;;
            # - container option
            -c)
            if [[ $# -gt 1 ]]
            then
                CONTAINER_NAME="$2"
                shift # past argument
                shift # past value
            else
                shift # past argument
                echo "ERROR: No argument left for container name! Use: -c container_name" >&2
                exit 20
            fi
            continue
            ;;
            # - marks the last parameter as local file
            -l|--local)
            if [[ $# -gt 1 ]]
            then
                # save name
                LOCAL_FILE="$2"

                # - it is the first location argument
                if [ "${is_from_found:-0}" -eq 0 ]
                then
                    is_from_found=1
                    # - local argument
                    COPY_FROM_LOCAL=1
                else
                    is_to_found=1
                fi

                # cleanup
                shift # past argument
                shift # past value
            else
                shift # past argument
                echo "ERROR: No argument left for local file! Use: [-l] /path/to/file" >&2
                exit 23
            fi
            continue
            ;;
            -r|--remote)
            if [[ $# -gt 1 ]]
            then
                # save name
                remote_file_arguent="$2"

                # - it is the first location argument
                if [ "${is_from_found:-0}" -eq 0 ]
                then
                    is_from_found=1
                    # - remote argument
                    COPY_FROM_LOCAL=0
                else
                    is_to_found=1
                fi

                # cleanup
                shift # past argument
                shift # past value
            else
                shift # past argument
                echo "ERROR: No argument left for local file! Use: [-r] pod-name:/path/to/file" >&2
                exit 24
            fi
            continue
            ;;
            # - end of named arguments
            # - from here on location syntax
            *)

            # - no named arguments allowed from here on
            if [[ "$1" =~ ^- ]]; then
                echo "ERROR: Unexpected argument: $1" >&2
                shift # past argument
                exit 30
            fi

            # - there can only be one local and one remote argument at the same call
            if [ "${is_from_found:-0}" -eq 1 ] && [ "${is_to_found:-0}" -eq 1 ]
            then
                echo "ERROR: There are already two locations given: $1" >&2
                shift # past argument
                exit 26
            fi

            # - if it the first location argument
            # - is it a local file?
            if [ "${is_from_found:-0}" -eq 0 ]
            then
                is_from_found=1
                if [[ "$1" =~ ":" ]]; then
                    COPY_FROM_LOCAL=0
                fi
            else
                is_to_found=1
            fi

            # - if it contains :
            # - the argument is a remote location
            if [[ "$1" =~ ":" ]]; then
                remote_file_arguent=$1
            # - else it is a local file
            else
                LOCAL_FILE="$1"
            fi
            shift # past argument
            ;;
        esac
    done

    # - parse remote_file_arguent from here on
    if [[ "$remote_file_arguent" ]]; then
        # - need at least a POD and FILE part
        if [[ "$remote_file_arguent" =~ ":" ]]; then
            # Need to split
            local remote_pod_part=$(echo $remote_file_arguent | sed 's|:.*$||g')
            local remote_file_part=$(echo $remote_file_arguent | sed 's|^[^:]*:||g')
            if  [[ ! "${remote_pod_part}" ]] || [[ ! "${remote_file_part}" ]]
            then
                echo "ERROR: Wrong syntax of REMOTE location: $remote_file_arguent" >&2
                exit 21
            fi
            KUBERNETES_FILE=${remote_file_part}

            if [[ "${remote_pod_part}" =~ "/" ]]; then
                KUBERNETES_NS=$(echo $remote_pod_part | sed 's|/.*$||g')
                KUBERNETES_POD=$(echo $remote_pod_part | sed 's|^[^/]*/||g')
            else
                KUBERNETES_POD="${remote_pod_part}"
            fi
        # - no remote argument found
        else
            shift # past argument
            echo "ERROR: Remote location syntax wrong! Use: [-r] pod-name:/path/to/file" >&2
            exit 25
        fi
    fi

    cpb64_debug "Found LOCAL_FILE: ${LOCAL_FILE} - REMOTE NS: ${KUBERNETES_NS} - REMOTE POD: ${KUBERNETES_POD} - REMOTE FILE: ${KUBERNETES_FILE} - REMOTE CONTAINER: '${CONTAINER_NAME}' - copy from local file? ($COPY_FROM_LOCAL)"

    # options $LOCAL_FILE, $KUBERNETES_FILE, $KUBERNETES_POD must be set!
    local location_error_found=0
    for required_var in LOCAL_FILE KUBERNETES_FILE KUBERNETES_POD
    do
        if [[ ! "${!required_var}" ]]
        then
            echo "ERROR: ${required_var} not defined! Please set FROM and TO location!" >&2
            location_error_found=1
        fi
    done

    if [ "${location_error_found:-0}" -eq 1 ]
    then
        exit 22
    fi

    # Allow . and directory names as local and remote targets
    if [ -d "${LOCAL_FILE}" ] && [ "${COPY_FROM_LOCAL}" -eq 0 ]
    then
        local old_local_file=$LOCAL_FILE
        # remove ending / for directories if existing
        LOCAL_FILE="$( echo ${LOCAL_FILE} | sed 's|/$||g' )"
        LOCAL_FILE="${LOCAL_FILE}/$( basename $KUBERNETES_FILE )"
        cpb64_debug "Replaced LOCAL_FILE='$old_local_file' by '${LOCAL_FILE}'!"
    elif [ "${COPY_FROM_LOCAL}" -eq 1 ] && [[ "${KUBERNETES_FILE}" =~ /$ ]]; then
        local old_kubernetes_file="${KUBERNETES_FILE}"
        KUBERNETES_FILE="${KUBERNETES_FILE}$( basename ${LOCAL_FILE} )"
        cpb64_debug "Replaced KUBERNETES_FILE='$old_kubernetes_file' by '${KUBERNETES_FILE}'!"
    elif [ "${COPY_FROM_LOCAL}" -eq 1 ] && [[ "${KUBERNETES_FILE}" =~ ^.$ ]]; then
        local old_kubernetes_file="${KUBERNETES_FILE}"
        KUBERNETES_FILE="$( basename ${LOCAL_FILE} )"
        cpb64_debug "Replaced KUBERNETES_FILE='$old_kubernetes_file' by '${KUBERNETES_FILE}'!"
    fi

    # way: local -> remote
    if [ "${COPY_FROM_LOCAL}" -eq 1 ]
    then
        if [ ! -r "${LOCAL_FILE}" ]
        then
            echo "ERROR: Source file ${LOCAL_FILE} does not exist or is not readable!" >&2
            exit 27
        elif [ -d "${LOCAL_FILE}" ]
        then
            echo "ERROR: Not supported! Source ${LOCAL_FILE} is a directoy!" >&2
            exit 29
        fi
    # way: remote -> local
    else
        if [ -r "${LOCAL_FILE}" ]
        then
            echo "ERROR: Destination file ${LOCAL_FILE} already exist!" >&2
            exit 28
        fi
    fi

}

# - executing kubectl for transferring the file
function cpb64_execute_kubectl {
    local container_command=''
    local ns_command=''
    local debug_command=''
    [[ $DEBUG ]] && debug_command='set -x; '

    if [[ "$CONTAINER_NAME" ]]
    then
        container_command="-c ${CONTAINER_NAME}"
    fi

    if [[ "$KUBERNETES_NS" ]]
    then
        ns_command="-n ${KUBERNETES_NS}"
    fi

    # Example: kubectl exec  -i pod -c container  -- base64 /tmp/test.hprof | base64 -d >test_via_base64.hprof
    local kubectl_command_from_remote="kubectl exec -i ${KUBERNETES_POD} ${container_command} ${ns_command} -- base64 ${KUBERNETES_FILE} | base64 -d >${LOCAL_FILE}"
    # mac os base64 has slightly different syntax, using cat as workaround
    local kubectl_command_from_local="cat ${LOCAL_FILE} | base64 | kubectl exec -i ${KUBERNETES_POD} ${container_command} ${ns_command} -- sh -c 'base64 -d >${KUBERNETES_FILE}' "

    # way: local -> remote
    if [ "${COPY_FROM_LOCAL}" -eq 1 ]
    then
        bash -c "$debug_command $kubectl_command_from_local"
    # way: remote -> local
    else
        bash -c "$debug_command $kubectl_command_from_remote"
    fi
}

### main
cpb64_dependency_check
cpb64_parse_arguments "$@"
cpb64_test
cpb64_execute_kubectl
