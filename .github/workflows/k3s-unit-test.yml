on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

name: Unit Tests

jobs:
  sleep:
    permissions:
        contents: read
    name: Sleep 4 min
    runs-on: ubuntu-latest
    steps:
      - name: Sleep without reason
        run: |
          sleep 240
  
  test:
    permissions:
        contents: read
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Check for jobs
        run: |
          
          echo '############### current workflow'
          set -x
          curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          set +x
          GITHUB_WORKFLOW_URL=$( curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" | jq -r '.workflow_url' )
          GITHUB_WORKFLOW_ID=$( curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" | jq -r '.workflow_url' )
          # Show the current run_number of the workflow run
          echo "CURRENT_RUN_NUMBER is ${GITHUB_RUN_NUMBER}"
          echo "GITHUB_WORKFLOW_URL is ${GITHUB_WORKFLOW_URL}"
          echo '############### runs in progress '
          set -x
          curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "${GITHUB_WORKFLOW_URL}/runs" | jq ".workflow_runs[] | select( (.status == \"in_progress\") ) | .id "
          set +x
          echo "############### my run"
          GITHUB_RUN_ID=$( curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "${GITHUB_WORKFLOW_URL}/runs" | jq -r ".workflow_runs[] | select( (.status == \"in_progress\") and (.run_number == ${GITHUB_RUN_NUMBER}) ) | .id " )
          echo '############### jobs'
          curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/jobs" | jq '.'
    
      # Setup dependencies
      - name: Start a local k8s cluster
        uses: jupyterhub/action-k3s-helm@v4
        timeout-minutes: 4
        with:
          # See available:
          # - k3s release channels at https://github.com/k3s-io/k3s/blob/HEAD/channel.yaml
          # - k3s versions at https://github.com/k3s-io/k3s/tags
          # - helm versions at https://github.com/helm/helm/tags
          #k3s-channel: latest
          # k3s-version: v1.29.0+k3s1
          k3s-version: v1.28.11+k3s1
          # helm-version: v3.13.0

      - name: Verify function of k8s, kubectl, and helm
        run: |
          echo "kubeconfig: $KUBECONFIG"
          kubectl version
          kubectl get pods --all-namespaces
          
          echo '############### current workflow'
          set -x
          curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          set +x
          GITHUB_WORKFLOW_URL=$( curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" | jq -r '.workflow_url' )
          GITHUB_WORKFLOW_ID=$( curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" | jq -r '.workflow_url' )
          # Show the current run_number of the workflow run
          echo "CURRENT_RUN_NUMBER is ${GITHUB_RUN_NUMBER}"
          echo "GITHUB_WORKFLOW_URL is ${GITHUB_WORKFLOW_URL}"
          echo '############### runs in progress '
          set -x
          curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "${GITHUB_WORKFLOW_URL}/runs" | jq ".workflow_runs[] | select( (.status == \"in_progress\") ) | .id "
          set +x
          echo "############### my run"
          GITHUB_RUN_ID=$( curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "${GITHUB_WORKFLOW_URL}/runs" | jq -r ".workflow_runs[] | select( (.status == \"in_progress\") and (.run_number == ${GITHUB_RUN_NUMBER}) ) | .id " )
          echo '############### jobs'
          curl -sH "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/jobs" | jq '.'

      # - whatever pods are needed to test cpbase64 functionality
      - name: Setup Test PODs
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Namespace
          metadata:
            name: cpbase64
            labels:
              name: cpbase64
          ---
          apiVersion: v1
          kind: Pod
          metadata:
            name: cpbase64-pod
            namespace: cpbase64
            labels:
              name: cpbase64-pod
          spec:
            containers:
              - name: cpb64
                image: busybox:latest
                command: ["/bin/tail"]
                args: ["-f","/dev/null"]
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cpbase64-deployment
            namespace: cpbase64
            labels:
              app: cpbase64-deployment
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: cpbase64-deployment
            template:
              metadata:
                labels:
                  app: cpbase64-deployment
              spec:
                containers:
                  - name: cpb64
                    image: busybox:latest
                    command: ["/bin/tail"]
                    args: ["-f","/dev/null"]
          EOF

          kubectl get namespaces
          kubectl get pods -A
          kubectl get deployments -n cpbase64
          kubectl get pods -n cpbaseb64

          kubectl wait --for=condition=ready pod --namespace cpbase64 -l name=cpbase64-pod
          kubectl wait --for=condition=ready pod --namespace cpbase64 -l app=cpbase64-deployment

          # - after initialization
          echo '#############################'
          date
          kubectl get deployments -n cpbase64
          kubectl get pods -n cpbase64

      - name: Setup Bats and bats libs
        uses: bats-core/bats-action@2.0.0

      # source code starts here 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Version
        id: vars
        run: |
          PROJECT_VERSION=${{ github.ref }}
          PROJECT_VERSION=$( echo $PROJECT_VERSION | sed 's|refs/tags/||g' )
          # allow manual run
          if [[ "${{ github.event_name }}"  == 'workflow_dispatch' ]]
          then
            PROJECT_VERSION=v0.0.1-test
          fi
          echo "event=${{ github.event_name }}"
          echo "PROJECT_VERSION=${PROJECT_VERSION}"
          echo "PROJECT_VERSION=${PROJECT_VERSION}" >>"$GITHUB_ENV"
          sed -i "s|^CPB64_VERSION=.*|CPB64_VERSION=$PROJECT_VERSION|g" src/main/kubectl-cpbase64

      - name: Run Syntax Unit Tests
        run: |
          set -x
          # kubectl seems always pre-installed; not needed for syntax checks if not installed
          command -v kubectl 2>/dev/null || alias kubectl=true
          which bats
          which kubectl
          bats src/tests/syntax_check.bats

      - name: Run Syntax Unit Tests - Pathname Expansion aware
        run: |
          set -x
          # kubectl seems always pre-installed; not needed for syntax checks if not installed
          command -v kubectl 2>/dev/null || alias kubectl=true
          mkdir -p tmp
          cd tmp
          touch -- {a..z} {A..Z} _ -
          bats ../src/tests/syntax_check.bats

      - name: Run K3s Unit Tests
        run: |
          set -x
          # kubectl seems always pre-installed; not needed for syntax checks if not installed
          which bats
          which kubectl
          cd tmp
          bats ../src/tests/k3s_tests.bats
